worker_processes auto;
#Nginx最大打开文件数
worker_rlimit_nofile 65535;
# events事件主要用来确定Nginx使用哪种算法
events {
  use epoll;
  multi_accept on;
  worker_connections 65535;
}

http {
  charset utf-8;
  #关闭请求成功日志
  access_log off;

  # MIME
  include mime.types;
  default_type application/octet-stream;

  #开启高效文件传输模式
  sendfile on;

  #必须在sendfile开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量
  tcp_nopush on;

  #==================     主要目的是保护服务器资源，CPU，内存，控制连接数，因为建立连接也是需要消耗资源的。      ==================#

  #客户端连接保持会话超时时间，超过这个时间，服务器断开这个链接
  keepalive_timeout 65;

  #也是防止网络阻塞，不过要包涵在keepalived参数才有效。
  tcp_nodelay on;

  #客户端请求头部的缓冲区大小
  client_header_buffer_size 4k;

  #这个将为打开文件指定缓存，默认是没有启用的
  open_file_cache max=102400 inactive=20s;

  #这个是指多长时间检查一次缓存的有效信息。
  open_file_cache_valid 30s;

  #open_file_cache指令中的inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive 时间内一次没被使用，它将被移除。
  open_file_cache_min_uses 1;

  #设置请求头的超时时间。我们也可以把这个设置低些，如果超过这个时间没有发送任何数据，nginx将返回request time out的错误。
  client_header_timeout 15;

  #设置请求体的超时时间。我们也可以把这个设置低些，超过这个时间没有发送任何数据，和上面一样的错误提示。
  client_body_timeout 15;

  #告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
  reset_timedout_connection on;

  #响应客户端超时时间，这个超时时间仅限于两个活动之间的时间，如果超过这个时间，客户端没有任何活动，nginx关闭连接。
  send_timeout 15;

  #隐藏Nginx版本信息
  server_tokens off;

  #用于设定如果文件不存在错误是否写入日志
  log_not_found off;

  #上传文件大小限制。
  client_max_body_size 50m;

  # 影响散列表的冲突率。types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升
  types_hash_max_size 2048;

  #设置了每个散列桶占用的内存大小
  types_hash_bucket_size 64;

  #================================  fastcgi 调优,代理的相关参数设置   ================================#
  proxy_connect_timeout 5;
  proxy_send_timeout 5;
  proxy_read_timeout 60;

  # 是否启用或者关闭 proxy_buffer,默认为 on
  proxy_buffering on;

  # 设置缓存大小，默认4KB、8KB 保持与 proxy_buffers 指令中size变量相同或者更小
  proxy_buffer_size 16k;

  # proxy_buffer个数和Buffer大小（一般设置为内存页大小）
  proxy_buffers 4 64k;

  # 限制处于 BUSY 状态的 proxy_buffer 的总大小
  proxy_busy_buffers_size 128k;

  # 所有临时文件总体积大小，磁盘上的临时文件不能超过该配置
  proxy_max_temp_file_size 128m;

  # 配置同时写入临时文件的数据量的总大小
  proxy_temp_file_write_size 128k;

  # 文件路径，临时存放代理服务器的大体积响应数据
  proxy_temp_path /usr/share/nginx/tmp-test;
  # 设置WEB缓存区名称为 cache_one ，内存缓存空间大小为100M，一天清理一次，硬盘缓存空间大小为10G
  proxy_cache_path /usr/share/nginx/cache-test levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=10g;

  #======================= 启用gzip压缩，提高用户访问速度  ==============================#

  #开启压缩功能
  gzip on;

  #设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取，默认值是0，不管页面多大都进行压缩，建议设置成大于1K，如果小与1K可能会越压越大。
  gzip_min_length 2k;

  #压缩缓冲区大小，表示申请4个单位为32K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果。
  gzip_buffers 4 32k;

  #压缩版本，用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。
  gzip_http_version 1.1;

  #压缩比例，用来指定GZIP压缩比，1压缩比最小，处理速度最快，9压缩比最大，传输速度快，但是处理慢，也比较消耗CPU资源。
  gzip_comp_level 6;

  #用来指定压缩的类型，‘text/html’类型总是会被压缩。默认值: gzip_types text/html (默认不对js/css文件进行压缩)
  gzip_types text/plain text/css application/javascript application/x-javascript application/json application/xml application/vnd.ms-fontobject application/x-font-ttf application/svg+xml application/x-icon;

  #varyheader支持，改选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用Squid缓存经过nginx压缩的数据。
  gzip_vary on;
  gzip_proxied any;
  gzip_static on;


  # 可有效防止XSS攻击
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options "nosniff";

  include /etc/nginx/conf.d/*.conf
}
